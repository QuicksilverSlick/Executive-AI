import crypto from"crypto";const PRODUCTION_CONFIG={cors:{allowedOrigins:["https://executiveaitraining.com","https://www.executiveaitraining.com"],allowedMethods:["GET","POST","OPTIONS"],allowedHeaders:["Content-Type","Authorization","X-Requested-With"],maxAge:86400,credentials:!1},rateLimit:{windowMs:6e4,maxRequests:5,maxRequestsPerSession:20,suspiciousActivityThreshold:3,blockDuration:9e5},token:{defaultDuration:60,maxDuration:120,minRefreshInterval:3e4,maxRefreshAttempts:10},headers:{security:{"X-Content-Type-Options":"nosniff","X-Frame-Options":"DENY","X-XSS-Protection":"1; mode=block","Referrer-Policy":"strict-origin-when-cross-origin","Strict-Transport-Security":"max-age=31536000; includeSubDomains","Content-Security-Policy":"default-src 'none'; connect-src 'self'"},cache:{"Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache",Expires:"0"}},monitoring:{logLevel:"warn",enableMetrics:!0,enableAuditLog:!0,retentionDays:30},validation:{enableStrictValidation:!0,requireUserAgent:!0,enableGeoBlocking:!1,blockedCountries:[]}};function getSecurityConfig(){return PRODUCTION_CONFIG}function validateOrigin(e,t){return!!e&&t.cors.allowedOrigins.includes(e)}function getSecurityHeaders(e,t){const s={...e.headers.security,...e.headers.cache};return t&&validateOrigin(t,e)&&(s["Access-Control-Allow-Origin"]=t,s["Access-Control-Allow-Methods"]=e.cors.allowedMethods.join(", "),s["Access-Control-Allow-Headers"]=e.cors.allowedHeaders.join(", "),s["Access-Control-Max-Age"]=e.cors.maxAge.toString(),e.cors.credentials&&(s["Access-Control-Allow-Credentials"]="true")),s}function validateRequest(e,t,s){const o=e.headers.get("origin"),i=e.headers.get("user-agent"),r=e.headers.get("content-type");if(o&&!validateOrigin(o,s))return{valid:!1,reason:"Invalid origin",shouldBlock:!0,shouldLog:!0};if(s.validation.requireUserAgent&&!i)return{valid:!1,reason:"Missing User-Agent header",shouldBlock:s.validation.enableStrictValidation,shouldLog:!0};if(!("POST"!==e.method||r&&r.includes("application/json")))return{valid:!1,reason:"Invalid Content-Type",shouldBlock:s.validation.enableStrictValidation,shouldLog:!0};if(i){if([/bot/i,/crawler/i,/spider/i,/scraper/i,/wget/i,/curl/i].some((e=>e.test(i)))&&s.validation.enableStrictValidation)return{valid:!1,reason:"Suspicious User-Agent",shouldBlock:!1,shouldLog:!0}}return{valid:!0}}class SecurityAuditor{static logs=[];static MAX_LOGS=1e3;static log(e){this.logs.push(e),this.logs.length>this.MAX_LOGS&&this.logs.shift(),"high"!==e.severity&&"critical"!==e.severity||console.warn(`🚨 Security Event [${e.severity.toUpperCase()}]: ${e.event}`,e)}static getLogs(e=100){return this.logs.slice(-e)}static getLogsBySeverity(e){return this.logs.filter((t=>t.severity===e))}static cleanup(e){const t=Date.now()-e;this.logs=this.logs.filter((e=>e.timestamp>t))}}class SecureKeyManager{constructor(e){this.config=e,this.initializeRotationScheduler(),this.startUsageMonitoring()}keys=new Map;usageHistory=[];rotationTimer=null;algorithm="aes-256-gcm";encrypt(e){const t=crypto.randomBytes(16),s=crypto.createCipher(this.algorithm,this.config.encryptionKey);s.setAAD(Buffer.from("apikey"));let o=s.update(e,"utf8","hex");o+=s.final("hex");const i=s.getAuthTag();return{encrypted:o,iv:t.toString("hex"),tag:i.toString("hex")}}decrypt(e){const t=crypto.createDecipher(this.algorithm,this.config.encryptionKey);t.setAAD(Buffer.from("apikey")),t.setAuthTag(Buffer.from(e.tag,"hex"));let s=t.update(e.encrypted,"hex","utf8");return s+=t.final("utf8"),s}generateKeyId(){return`key_${crypto.randomBytes(16).toString("hex")}`}generateRequestSignature(e,t,s,o){const i=`${e}:${t}:${s}:${o}`;return crypto.createHmac("sha256",this.config.encryptionKey).update(i).digest("hex")}verifyRequestSignature(e,t,s,o,i){const r=this.generateRequestSignature(t,s,o,i);return crypto.timingSafeEqual(Buffer.from(e),Buffer.from(r))}storeKey(e,t="production"){const s=this.generateKeyId(),o=this.encrypt(e),i={keyId:s,createdAt:Date.now(),lastUsed:0,usageCount:0,isActive:!0,environment:t};return this.keys.set(s,{encrypted:JSON.stringify(o),metadata:i}),this.config.enableAutoRotation&&(i.rotationScheduled=Date.now()+60*this.config.keyRotationIntervalHours*60*1e3),SecurityAuditor.log({timestamp:Date.now(),event:"API_KEY_STORED",clientIP:"system",details:{keyId:s,environment:t},severity:"medium"}),console.log(`🔐 API key stored securely: ${s} (${t})`),s}getKey(e,t,s,o){const i=this.keys.get(e);if(!i||!i.metadata.isActive)return this.logUsageEvent(e,t,s,!1,"KEY_NOT_FOUND"),null;if(o){if(!this.verifyRequestSignature(o,e,Date.now(),t,s))return this.logUsageEvent(e,t,s,!1,"INVALID_SIGNATURE"),SecurityAuditor.log({timestamp:Date.now(),event:"INVALID_REQUEST_SIGNATURE",clientIP:t,details:{keyId:e,operation:s},severity:"high"}),null}if(this.isKeyExpired(i.metadata))return this.deactivateKey(e,"EXPIRED"),this.logUsageEvent(e,t,s,!1,"KEY_EXPIRED"),null;try{const o=JSON.parse(i.encrypted),r=this.decrypt(o);return i.metadata.lastUsed=Date.now(),i.metadata.usageCount++,this.logUsageEvent(e,t,s,!0),this.checkUsagePatterns(e,t),r}catch(o){return this.logUsageEvent(e,t,s,!1,"DECRYPTION_ERROR"),SecurityAuditor.log({timestamp:Date.now(),event:"KEY_DECRYPTION_FAILED",clientIP:t,details:{keyId:e,error:o instanceof Error?o.message:"Unknown error"},severity:"critical"}),null}}checkUsagePatterns(e,t){const s=this.usageHistory.filter((s=>s.keyId===e&&s.timestamp>Date.now()-6e4&&s.clientIP===t)),o=s.length,i=s.filter((e=>!e.success)).length/o;o>this.config.alertThresholds.unusualUsage&&SecurityAuditor.log({timestamp:Date.now(),event:"UNUSUAL_USAGE_PATTERN",clientIP:t,details:{keyId:e,requestCount:o,timeWindow:"1m"},severity:"medium"}),i>this.config.alertThresholds.errorRate&&SecurityAuditor.log({timestamp:Date.now(),event:"HIGH_ERROR_RATE",clientIP:t,details:{keyId:e,errorRate:i,requestCount:o},severity:"high"});const r=s.filter((e=>!e.success)).length;r>this.config.alertThresholds.suspiciousActivity&&(this.temporarilyBlockKey(e,3e5),SecurityAuditor.log({timestamp:Date.now(),event:"SUSPICIOUS_ACTIVITY_DETECTED",clientIP:t,details:{keyId:e,failedAttempts:r,action:"key_temporarily_blocked"},severity:"critical"}))}logUsageEvent(e,t,s,o,i){const r={timestamp:Date.now(),keyId:e,clientIP:t,operation:s,success:o,errorCode:i,requestSignature:this.generateRequestSignature(e,Date.now(),t,s)};this.usageHistory.push(r);const n=Date.now()-864e5;this.usageHistory=this.usageHistory.filter((e=>e.timestamp>n)),this.config.enableUsageMonitoring&&console.log(`📊 Key usage: ${e} | ${s} | ${o?"✅":"❌"} | ${t}`)}isKeyExpired(e){return Date.now()-e.createdAt>this.config.maxKeyAge}deactivateKey(e,t){const s=this.keys.get(e);s&&(s.metadata.isActive=!1,SecurityAuditor.log({timestamp:Date.now(),event:"API_KEY_DEACTIVATED",clientIP:"system",details:{keyId:e,reason:t},severity:"medium"}),console.log(`🚫 API key deactivated: ${e} (${t})`))}temporarilyBlockKey(e,t){this.deactivateKey(e,"TEMPORARY_SECURITY_BLOCK"),setTimeout((()=>{const t=this.keys.get(e);t&&(t.metadata.isActive=!0,console.log(`🔓 API key unblocked: ${e}`))}),t)}async rotateKey(e,t){const s=this.keys.get(e);if(!s)throw new Error(`Key ${e} not found`);const o=this.storeKey(t,s.metadata.environment);return setTimeout((()=>{this.deactivateKey(e,"ROTATED")}),3e4),SecurityAuditor.log({timestamp:Date.now(),event:"API_KEY_ROTATED",clientIP:"system",details:{oldKeyId:e,newKeyId:o},severity:"low"}),console.log(`🔄 API key rotated: ${e} → ${o}`),o}initializeRotationScheduler(){this.config.enableAutoRotation&&(this.rotationTimer=setInterval((()=>{const e=Date.now();for(const[t,s]of this.keys.entries())s.metadata.rotationScheduled&&e>=s.metadata.rotationScheduled&&(console.log(`⚠️ API key ${t} requires rotation - manual intervention needed`),SecurityAuditor.log({timestamp:Date.now(),event:"API_KEY_ROTATION_REQUIRED",clientIP:"system",details:{keyId:t,environment:s.metadata.environment},severity:"medium"}))}),6e4))}startUsageMonitoring(){this.config.enableUsageMonitoring&&setInterval((()=>{const e=this.generateUsageReport();console.log("📈 API Key Usage Report:",e)}),36e5)}generateUsageReport(){const e=this.keys.size,t=Array.from(this.keys.values()).filter((e=>e.metadata.isActive)).length,s=this.usageHistory.length,o=this.usageHistory.filter((e=>e.success)).length,i=s>0?o/s*100:0,r=new Map;this.usageHistory.forEach((e=>{const t=r.get(e.operation)||0;r.set(e.operation,t+1)}));return{totalKeys:e,activeKeys:t,totalRequests:s,successRate:i,topOperations:Array.from(r.entries()).map((([e,t])=>({operation:e,count:t}))).sort(((e,t)=>t.count-e.count)).slice(0,5)}}getKeyMetadata(e){const t=this.keys.get(e);return t?{...t.metadata}:null}listActiveKeys(){return Array.from(this.keys.values()).filter((e=>e.metadata.isActive)).map((e=>({...e.metadata})))}cleanup(){const e=Date.now(),t=[];for(const[s,o]of this.keys.entries())!o.metadata.isActive&&e-o.metadata.lastUsed>6048e5&&t.push(s);t.forEach((e=>{this.keys.delete(e),console.log(`🗑️ Removed expired key: ${e}`)}));const s=Date.now()-2592e6;this.usageHistory=this.usageHistory.filter((e=>e.timestamp>s)),t.length>0&&SecurityAuditor.log({timestamp:Date.now(),event:"EXPIRED_KEYS_CLEANED",clientIP:"system",details:{removedCount:t.length},severity:"low"})}destroy(){this.rotationTimer&&clearInterval(this.rotationTimer),this.keys.clear(),this.usageHistory=[],console.log("🧹 SecureKeyManager destroyed")}}const DEFAULT_KEY_CONFIGS={development:{encryptionKey:process.env.KEY_ENCRYPTION_SECRET||crypto.randomBytes(32).toString("hex"),keyRotationIntervalHours:168,maxKeyAge:2592e6,enableAutoRotation:!1,enableUsageMonitoring:!0,alertThresholds:{unusualUsage:100,suspiciousActivity:10,errorRate:.5}},production:{encryptionKey:process.env.KEY_ENCRYPTION_SECRET,keyRotationIntervalHours:72,maxKeyAge:6048e5,enableAutoRotation:!0,enableUsageMonitoring:!0,alertThresholds:{unusualUsage:50,suspiciousActivity:5,errorRate:.3}}};let keyManagerInstance=null;function getKeyManager(e="production"){if(!keyManagerInstance){keyManagerInstance=new SecureKeyManager(DEFAULT_KEY_CONFIGS[e])}return keyManagerInstance}class SecureAPIProxy{constructor(e){this.config=e,this.requestSigningKey=process.env.PROXY_SIGNING_KEY||crypto.randomBytes(32).toString("hex")}responseCache=new Map;requestSigningKey;generateRequestSignature(e,t,s,o,i,r){const n=JSON.stringify({sessionId:e,requestId:t,method:s,endpoint:o,body:i?JSON.stringify(i):"",timestamp:r});return crypto.createHmac("sha256",this.requestSigningKey).update(n).digest("hex")}verifyRequestSignature(e){if(!this.config.enableRequestSigning)return!0;const t=this.generateRequestSignature(e.sessionId,e.requestId,e.method,e.endpoint,e.body,e.timestamp),s=crypto.timingSafeEqual(Buffer.from(e.signature,"hex"),Buffer.from(t,"hex"));return s||SecurityAuditor.log({timestamp:Date.now(),event:"INVALID_PROXY_SIGNATURE",clientIP:"proxy",details:{sessionId:e.sessionId,requestId:e.requestId},severity:"high"}),s}isEndpointAllowed(e){return this.config.allowedEndpoints.some((t=>e.startsWith(t)||new RegExp(t).test(e)))}getCachedResponse(e){if(!this.config.enableResponseCaching)return null;const t=this.responseCache.get(e);return t&&Date.now()<t.expires?t.data:(t&&this.responseCache.delete(e),null)}cacheResponse(e,t){this.config.enableResponseCaching&&this.responseCache.set(e,{data:t,expires:Date.now()+this.config.cacheExpirationMs})}async proxyChatCompletions(e,t){const s=getKeyManager().getKey("openai_primary","proxy-server","chat-completion");if(!s)throw new Error("API key not available");const o=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:`Bearer ${s}`,"Content-Type":"application/json","User-Agent":"ExecutiveAI-Proxy/1.0"},body:JSON.stringify(e)});if(!o.ok){const e=await o.text();throw new Error(`OpenAI API error: ${o.status} - ${e}`)}return await o.json()}async proxyTextToSpeech(e,t){const s=getKeyManager().getKey("openai_primary","proxy-server","text-to-speech");if(!s)throw new Error("API key not available");const o=await fetch("https://api.openai.com/v1/audio/speech",{method:"POST",headers:{Authorization:`Bearer ${s}`,"Content-Type":"application/json","User-Agent":"ExecutiveAI-Proxy/1.0"},body:JSON.stringify(e)});if(!o.ok){const e=await o.text();throw new Error(`OpenAI TTS API error: ${o.status} - ${e}`)}return await o.arrayBuffer()}async proxySpeechToText(e,t){const s=getKeyManager().getKey("openai_primary","proxy-server","speech-to-text");if(!s)throw new Error("API key not available");const o=await fetch("https://api.openai.com/v1/audio/transcriptions",{method:"POST",headers:{Authorization:`Bearer ${s}`,"User-Agent":"ExecutiveAI-Proxy/1.0"},body:e});if(!o.ok){const e=await o.text();throw new Error(`OpenAI STT API error: ${o.status} - ${e}`)}return await o.json()}async processRequest(e,t){const s=Date.now();try{if(!this.verifyRequestSignature(e))return{success:!1,error:"Invalid request signature",requestId:e.requestId,processingTime:Date.now()-s,mode:"proxy"};if(Date.now()-e.timestamp>3e5)return{success:!1,error:"Request timestamp too old",requestId:e.requestId,processingTime:Date.now()-s,mode:"proxy"};if(!this.isEndpointAllowed(e.endpoint))return SecurityAuditor.log({timestamp:Date.now(),event:"BLOCKED_PROXY_ENDPOINT",clientIP:t,details:{endpoint:e.endpoint,sessionId:e.sessionId,requestId:e.requestId},severity:"medium"}),{success:!1,error:"Endpoint not allowed",requestId:e.requestId,processingTime:Date.now()-s,mode:"proxy"};if(JSON.stringify(e.body||{}).length>this.config.maxRequestSize)return{success:!1,error:"Request too large",requestId:e.requestId,processingTime:Date.now()-s,mode:"proxy"};const o=`${e.endpoint}:${crypto.createHash("sha256").update(JSON.stringify(e.body)).digest("hex")}`,i=this.getCachedResponse(o);if(i)return{success:!0,data:i,requestId:e.requestId,processingTime:Date.now()-s,mode:"proxy"};let r;if("/v1/chat/completions"===e.endpoint)r=await this.proxyChatCompletions(e.body,e.sessionId);else if("/v1/audio/speech"===e.endpoint){const t=await this.proxyTextToSpeech(e.body,e.sessionId);r={audio:Buffer.from(t).toString("base64"),contentType:"audio/mpeg"}}else{if("/v1/audio/transcriptions"!==e.endpoint)return{success:!1,error:"Unsupported endpoint",requestId:e.requestId,processingTime:Date.now()-s,mode:"proxy"};r=await this.proxySpeechToText(e.body,e.sessionId)}return this.cacheResponse(o,r),SecurityAuditor.log({timestamp:Date.now(),event:"SUCCESSFUL_PROXY_REQUEST",clientIP:t,details:{endpoint:e.endpoint,sessionId:e.sessionId,requestId:e.requestId,processingTime:Date.now()-s},severity:"low"}),{success:!0,data:r,requestId:e.requestId,processingTime:Date.now()-s,mode:"proxy"}}catch(o){const i=o instanceof Error?o.message:"Unknown error";return SecurityAuditor.log({timestamp:Date.now(),event:"PROXY_REQUEST_ERROR",clientIP:t,details:{endpoint:e.endpoint,sessionId:e.sessionId,requestId:e.requestId,error:i},severity:"medium"}),{success:!1,error:i,requestId:e.requestId,processingTime:Date.now()-s,mode:"proxy"}}}generateSecureProxyToken(e){return{token:`proxy_${crypto.createHmac("sha256",this.requestSigningKey).update(`${e}:${Date.now()}:proxy`).digest("hex")}`,expiresAt:Date.now()+18e5,mode:"proxy",proxyEndpoint:"/api/voice-agent/proxy"}}cleanup(){const e=Date.now();for(const[t,s]of this.responseCache.entries())e>=s.expires&&this.responseCache.delete(t)}getStats(){return{cacheSize:this.responseCache.size,cacheHitRate:0,requestsProcessed:0}}}const DEFAULT_PROXY_CONFIG={maxRequestSize:1048576,requestTimeoutMs:3e4,enableRequestSigning:!0,enableResponseCaching:!0,cacheExpirationMs:3e5,allowedEndpoints:["/v1/chat/completions","/v1/audio/speech","/v1/audio/transcriptions"]};let proxyInstance=null;function getSecureProxy(e=DEFAULT_PROXY_CONFIG){return proxyInstance||(proxyInstance=new SecureAPIProxy(e)),proxyInstance}export{SecurityAuditor as S,getSecurityConfig as a,getSecurityHeaders as b,getKeyManager as c,getSecureProxy as g,validateRequest as v};