import{b as createTokenRateLimiter,a as createRateLimitMiddleware}from"./rateLimiter.yR3vRFgB.js";const prerender=!1,OPENAI_API_KEY="sk-your-openai-api-key-here",ALLOWED_ORIGINS="https://executiveaitraining.com,https://executiveaitraining.vercel.app"?.split(",")||["http://localhost:4321","http://localhost:4322","https://executiveaitraining.com"],refreshRateLimiter=createTokenRateLimiter({windowMs:6e4,maxRequests:5,onLimitReached:(e,s)=>{console.warn(`üö´ Token refresh rate limit exceeded for ${e} - Attempts: ${s}`)}}),activeSessions=new Map;function validateRefreshRequest(e,s){if(!e||"string"!=typeof e)return{valid:!1,reason:"Invalid session ID"};const t=activeSessions.get(e);if(!t)return{valid:!1,reason:"Session not found or expired"};if(t.clientIP!==s)return console.warn(`üö® Session hijacking attempt: Session ${e} from ${s}, expected ${t.clientIP}`),{valid:!1,reason:"Session validation failed"};return Date.now()-t.lastRefresh<3e4?{valid:!1,reason:"Refresh too frequent"}:{valid:!0}}async function generateEphemeralToken(){const e=await fetch("https://api.openai.com/v1/realtime/sessions",{method:"POST",headers:{Authorization:`Bearer ${OPENAI_API_KEY}`,"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-4o-realtime-preview",voice:"alloy",expires_at:Math.floor(Date.now()/1e3)+60})});if(!e.ok){const s=await e.text();throw console.error("OpenAI token generation failed:",e.status,s),new Error(`Token generation failed: ${e.status}`)}const s=await e.json();return{token:s.client_secret.value,expiresAt:1e3*s.expires_at}}setInterval((()=>{const e=Date.now(),s=[];for(const[t,n]of activeSessions.entries())(e-n.createdAt>6e5||n.refreshCount>20)&&s.push(t);s.forEach((e=>{activeSessions.delete(e)})),s.length>0&&console.log(`üßπ Cleaned up ${s.length} expired sessions`)}),3e5);const POST=async({request:e,clientAddress:s})=>{const t=Date.now(),n=s||e.headers.get("x-forwarded-for")||e.headers.get("x-real-ip")||"unknown",o=e.headers.get("user-agent")||"unknown",r=e.headers.get("origin");console.log(`üîÑ Token refresh request from ${n} - ${o} - Origin: ${r}`);try{if(r&&!ALLOWED_ORIGINS.includes(r))return console.warn(`‚ùå Invalid origin for refresh: ${r} from ${n}`),new Response(JSON.stringify({success:!1,error:"Invalid origin"}),{status:403,headers:{"Content-Type":"application/json"}});const s=createRateLimitMiddleware(refreshRateLimiter)(e,n);if(s)return s;let o;0;try{o=await e.json()}catch(e){return new Response(JSON.stringify({success:!1,error:"Invalid request body"}),{status:400,headers:{"Content-Type":"application/json"}})}const{sessionId:i}=o,a=validateRefreshRequest(i,n);if(!a.valid)return console.warn(`‚ùå Invalid refresh request from ${n}: ${a.reason}`),new Response(JSON.stringify({success:!1,error:a.reason}),{status:400,headers:{"Content-Type":"application/json"}});const{token:c,expiresAt:l}=await generateEphemeralToken(),d=activeSessions.get(i);d.lastRefresh=Date.now(),d.refreshCount++;const u={success:!0,token:c,expiresAt:l,sessionId:i},f=Date.now()-t;return console.log(`‚úÖ Token refreshed for ${n} - Session: ${i} - Refresh #${d.refreshCount} - Processing: ${f}ms`),new Response(JSON.stringify(u),{status:200,headers:{"Content-Type":"application/json","Cache-Control":"no-cache, no-store, must-revalidate","X-Processing-Time":f.toString(),"X-Refresh-Count":d.refreshCount.toString(),...r&&ALLOWED_ORIGINS.includes(r)&&{"Access-Control-Allow-Origin":r,"Access-Control-Allow-Methods":"POST","Access-Control-Allow-Headers":"Content-Type, Authorization"}}})}catch(e){const s=Date.now()-t;return console.error(`‚ùå Token refresh error for ${n}:`,e),new Response(JSON.stringify({success:!1,error:"Token refresh failed"}),{status:500,headers:{"Content-Type":"application/json","X-Processing-Time":s.toString()}})}},OPTIONS=async({request:e})=>{const s=e.headers.get("origin");return s&&ALLOWED_ORIGINS.includes(s)?new Response(null,{status:200,headers:{"Access-Control-Allow-Origin":s,"Access-Control-Allow-Methods":"POST, OPTIONS","Access-Control-Allow-Headers":"Content-Type, Authorization","Access-Control-Max-Age":"86400"}}):new Response(null,{status:404})};function registerSession(e,s){activeSessions.set(e,{sessionId:e,clientIP:s,createdAt:Date.now(),lastRefresh:Date.now(),refreshCount:0}),console.log(`üìù Registered new session: ${e} from ${s}`)}function getSessionStats(){let e=0;for(const s of activeSessions.values())e+=s.refreshCount;return{activeSessions:activeSessions.size,totalRefreshes:e}}const _page=Object.freeze(Object.defineProperty({__proto__:null,OPTIONS:OPTIONS,POST:POST,getSessionStats:getSessionStats,prerender:false,registerSession:registerSession},Symbol.toStringTag,{value:"Module"}));export{_page as _,getSessionStats as g,registerSession as r};