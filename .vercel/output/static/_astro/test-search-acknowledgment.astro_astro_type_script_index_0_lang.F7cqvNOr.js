class e{constructor(){this.isConnected=!1,this.isRecording=!1,this.events=[],this.metrics={acknowledgmentTime:0,searchTime:0,totalInteractions:0,successfulInteractions:0},this.currentVoiceId=null,this.webrtcConnection=null,this.initializeElements(),this.bindEvents(),this.updateUI()}initializeElements(){this.elements={statusDot:document.getElementById("statusDot"),connectionStatus:document.getElementById("connectionStatus"),connectBtn:document.getElementById("connectBtn"),disconnectBtn:document.getElementById("disconnectBtn"),testAudioBtn:document.getElementById("testAudioBtn"),startRecording:document.getElementById("startRecording"),stopRecording:document.getElementById("stopRecording"),clearEvents:document.getElementById("clearEvents"),eventLog:document.getElementById("eventLog"),acknowledgmentTime:document.getElementById("acknowledgmentTime"),searchTime:document.getElementById("searchTime"),totalInteractions:document.getElementById("totalInteractions"),successRate:document.getElementById("successRate"),validationChecklist:document.getElementById("validationChecklist")}}bindEvents(){this.elements.connectBtn.addEventListener("click",(()=>this.connectVoiceAgent())),this.elements.disconnectBtn.addEventListener("click",(()=>this.disconnectVoiceAgent())),this.elements.testAudioBtn.addEventListener("click",(()=>this.testAudio())),this.elements.startRecording.addEventListener("click",(()=>this.startRecording())),this.elements.stopRecording.addEventListener("click",(()=>this.stopRecording())),this.elements.clearEvents.addEventListener("click",(()=>this.clearEventLog())),document.querySelectorAll(".scenario-button").forEach((e=>{e.addEventListener("click",(()=>{const t=e.getAttribute("data-query"),n="true"===e.getAttribute("data-error");this.runTestScenario(t,n)}))}))}async connectVoiceAgent(){try{this.logEvent("Connecting to voice agent...","info"),await this.setupWebRTCConnection(),this.isConnected=!0,this.currentVoiceId="voice-"+Date.now(),this.logEvent("Connected successfully. Voice ID: "+this.currentVoiceId,"success")}catch(e){this.logEvent("Connection failed: "+e.message,"error")}this.updateUI()}async setupWebRTCConnection(){this.webrtcConnection={systemPrompt:'You are a helpful voice assistant designed for search acknowledgment testing. Follow these critical rules:\n\n1. IMMEDIATELY acknowledge any search request verbally before executing search functions\n2. Use phrases like "Let me search for that" or "I\'ll look that up for you" \n3. Maintain the same voice and speaking style throughout the interaction\n4. Execute search functions only AFTER providing verbal acknowledgment\n5. Present results in a conversational, natural manner\n6. For error scenarios, maintain voice consistency while explaining the issue\n\nAvailable functions:\n- search_web: Search the web (ALWAYS acknowledge verbally first)\n- get_weather: Get weather information (ALWAYS say "I\'ll check the weather for you" first)\n\nRemember: Your acknowledgment should sound natural and use the same voice as your regular responses.',state:"connected",voice:"alloy",model:"claude-3-5-sonnet-20241022"},await new Promise((e=>setTimeout(e,1e3)))}disconnectVoiceAgent(){this.webrtcConnection&&(this.webrtcConnection=null),this.isConnected=!1,this.currentVoiceId=null,this.logEvent("Disconnected from voice agent","info"),this.updateUI()}async testAudio(){this.isConnected&&(this.logEvent("Testing audio connection...","info"),await new Promise((e=>setTimeout(e,500))),this.logEvent("Audio test successful - Voice ID: "+this.currentVoiceId,"success"))}async runTestScenario(e,t=!1){if(!this.isConnected)return void this.logEvent("Please connect voice agent first","error");this.logEvent(`Testing scenario: "${e}"`,"info");const n=Date.now();let s=0,i=0;try{if(this.logEvent(`User input: "${e}"`,"user"),t)throw new Error("Simulated network timeout");await new Promise((e=>setTimeout(e,200))),s=Date.now()-n,this.logEvent('Agent acknowledges: "Let me search for that information"',"acknowledgment"),this.addEvent("acknowledgment",{query:e,acknowledged:!0,voiceId:this.currentVoiceId,timestamp:Date.now()}),await new Promise((e=>setTimeout(e,300))),i=Date.now()-n,this.logEvent(`Executing search for: "${e}"`,"search"),this.addEvent("search_start",{query:e,voiceId:this.currentVoiceId,timestamp:Date.now()}),await new Promise((e=>setTimeout(e,400))),this.logEvent("Search completed successfully","complete"),this.addEvent("search_complete",{query:e,results:["Mock search result"],voiceId:this.currentVoiceId,timestamp:Date.now()}),this.metrics.totalInteractions++,this.metrics.successfulInteractions++,this.metrics.acknowledgmentTime=s,this.metrics.searchTime=i}catch(t){this.logEvent(`Error during search: ${t.message}`,"error"),this.addEvent("error",{query:e,error:t.message,voiceId:this.currentVoiceId,timestamp:Date.now()}),this.metrics.totalInteractions++}this.updateMetrics(),this.validateSearchFlow()}startRecording(){this.isConnected&&(this.isRecording=!0,this.logEvent("Started voice recording...","info"),this.updateUI(),setTimeout((()=>{this.isRecording&&(this.stopRecording(),this.logEvent("Recording stopped automatically (timeout)","warning"))}),1e4))}stopRecording(){this.isRecording&&(this.isRecording=!1,this.logEvent("Stopped voice recording","info"),setTimeout((()=>{this.runTestScenario("What's the weather in San Francisco?")}),500),this.updateUI())}addEvent(e,t){this.events.push({type:e,data:t,timestamp:Date.now()})}logEvent(e,t="info"){const n=(new Date).toLocaleTimeString(),s=document.createElement("div");s.className=`event-item event-${t}`,s.textContent=`[${n}] ${e}`,this.elements.eventLog.appendChild(s),this.elements.eventLog.scrollTop=this.elements.eventLog.scrollHeight}clearEventLog(){this.elements.eventLog.innerHTML='<div class="event-item event-info">Event log cleared...</div>',this.events=[],this.metrics={acknowledgmentTime:0,searchTime:0,totalInteractions:0,successfulInteractions:0},this.updateMetrics()}updateMetrics(){this.elements.acknowledgmentTime.textContent=this.metrics.acknowledgmentTime+"ms",this.elements.searchTime.textContent=this.metrics.searchTime+"ms",this.elements.totalInteractions.textContent=this.metrics.totalInteractions;const e=this.metrics.totalInteractions>0?Math.round(this.metrics.successfulInteractions/this.metrics.totalInteractions*100):100;this.elements.successRate.textContent=e+"%"}validateSearchFlow(){const e=this.events.slice(-5),t={acknowledgment:!1,voiceConsistency:!1,noManualTts:!0,smoothTransition:!1,errorHandling:!0},n=e.find((e=>"acknowledgment"===e.type)),s=e.find((e=>"search_start"===e.type));n&&s&&(t.acknowledgment=n.timestamp<s.timestamp,t.voiceConsistency=n.data.voiceId===s.data.voiceId,t.smoothTransition=s.timestamp-n.timestamp<1e3),Object.keys(t).forEach((e=>{const n="check-"+e.replace(/([A-Z])/g,"-$1").toLowerCase(),s=document.getElementById(n);s&&(t[e]?(s.classList.add("checked"),s.textContent="✓"):(s.classList.remove("checked"),s.textContent="✗"))}))}updateUI(){this.isConnected?(this.elements.statusDot.classList.add("connected"),this.elements.connectionStatus.textContent="Connected",this.elements.connectBtn.disabled=!0,this.elements.disconnectBtn.disabled=!1,this.elements.testAudioBtn.disabled=!1,this.elements.startRecording.disabled=!1):(this.elements.statusDot.classList.remove("connected"),this.elements.connectionStatus.textContent="Disconnected",this.elements.connectBtn.disabled=!1,this.elements.disconnectBtn.disabled=!0,this.elements.testAudioBtn.disabled=!0,this.elements.startRecording.disabled=!0),this.isRecording?(this.elements.startRecording.disabled=!0,this.elements.stopRecording.disabled=!1):(this.elements.startRecording.disabled=!this.isConnected,this.elements.stopRecording.disabled=!0),document.querySelectorAll(".scenario-button").forEach((e=>{e.disabled=!this.isConnected}))}}document.addEventListener("DOMContentLoaded",(()=>{window.testController=new e}));