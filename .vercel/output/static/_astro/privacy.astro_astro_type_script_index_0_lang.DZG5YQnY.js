class e{constructor(){console.log("🚀 ScrollNavigation constructor starting..."),this.progressBar=document.getElementById("progress-bar"),this.sections=Array.from(document.querySelectorAll(".section-card")),this.navLinks=Array.from(document.querySelectorAll('a[href^="#"]')),this.filterButtons=Array.from(document.querySelectorAll(".filter-btn"));const e=getComputedStyle(document.documentElement),t=e.getPropertyValue("--header-height")||"5.5rem";this.headerOffset=parseFloat(t)*parseFloat(e.fontSize),console.log("📊 Elements found:"),console.log("  - Progress bar:",!!this.progressBar),console.log("  - Sections:",this.sections.length,this.sections.map((e=>e.id))),console.log("  - Nav links:",this.navLinks.length,this.navLinks.map((e=>e.getAttribute("href")))),console.log("  - Filter buttons:",this.filterButtons.length),console.log("  - Header offset:",this.headerOffset+"px",`(from CSS var: ${t})`),this.init()}init(){console.log("🔧 Initializing ScrollNavigation..."),this.setupIntersectionObserver(),this.setupScrollListeners(),this.setupNavigationClicks(),this.setupPriorityFilters(),this.updateProgress(),console.log("✅ ScrollNavigation initialization complete")}setupIntersectionObserver(){console.log("👁️ Setting up Intersection Observer...");const e={root:null,rootMargin:`-${this.headerOffset}px 0px -60% 0px`,threshold:[0,.25,.5,.75,1]};console.log("Observer options:",e),this.observer=new IntersectionObserver((e=>{console.log("👁️ Intersection Observer callback triggered with",e.length,"entries");let t=null,o=0;e.forEach((e=>{console.log(`  - Section ${e.target.id}: intersecting=${e.isIntersecting}, ratio=${e.intersectionRatio}`),e.isIntersecting&&e.intersectionRatio>o&&(o=e.intersectionRatio,t=e.target)})),t&&(console.log(`🎯 Most visible section: ${t.id} (ratio: ${o})`),this.updateActiveNavigation(t.id))}),e),console.log(`📍 Observing ${this.sections.length} sections...`),this.sections.forEach((e=>{console.log(`  - Observing section: ${e.id}`),this.observer.observe(e)}))}updateActiveNavigation(e){console.log(`🎯 updateActiveNavigation called for section: ${e}`),console.log(`📝 Updating ${this.navLinks.length} nav links...`),this.navLinks.forEach(((t,o)=>{const s=t.getAttribute("href"),n=s?.substring(1),i=n===e;console.log(`  - Link ${o}: href="${s}", targetId="${n}", isActive=${i}`),t.classList.toggle("bg-white",i),t.classList.toggle("dark:bg-dark-surface-3",i),t.classList.toggle("shadow-sm",i)}))}scrollToElement(e){console.log(`🚀 scrollToElement called with targetId: "${e}"`);const t=document.getElementById(e);if(console.log("🎯 Target element found:",!!t,t?`(tagName: ${t.tagName}, classes: ${t.className})`:"(NOT FOUND)"),!t)return console.error(`❌ Target element with id "${e}" not found!`),!1;const o=window.matchMedia("(prefers-reduced-motion: reduce)").matches;console.log(`♿ Prefers reduced motion: ${o}`);const s=t.getBoundingClientRect();return console.log(`📍 Initial target position: top=${s.top}, left=${s.left}`),console.log("📜 Calling scrollIntoView with behavior: "+(o?"auto":"smooth")),t.scrollIntoView({behavior:o?"auto":"smooth",block:"start",inline:"nearest"}),console.log("✅ Scroll initiated - CSS scroll-margin-top will handle header offset"),console.log("♿ Setting focus to target element"),t.setAttribute("tabindex","-1"),t.focus({preventScroll:!0}),console.log("✅ scrollToElement completed successfully"),!0}setupNavigationClicks(){console.log("🖱️ Setting up navigation click handlers..."),document.addEventListener("click",(e=>{console.log("🖱️ Click event detected on:",e.target);const t=e.target.closest('a[href^="#"]');if(console.log("🔗 Found navigation link:",!!t,t?`(href: ${t.getAttribute("href")})`:"(NOT FOUND)"),!t)return void console.log("⚠️ Click was not on a navigation link, ignoring");const o=t.getAttribute("href");if(console.log(`📋 Link href: "${o}"`),!o||"#"===o)return void console.log("⚠️ Invalid href, ignoring click");console.log("🚫 Preventing default click behavior"),e.preventDefault();const s=o.substring(1);console.log(`🎯 Extracted targetId: "${s}"`),console.log(`🚀 Calling scrollToElement for targetId: "${s}"`),this.scrollToElement(s)?(console.log("📝 Scroll successful, updating URL..."),history.pushState?(history.pushState(null,null,o),console.log(`✅ URL updated to: ${o}`)):console.log("⚠️ history.pushState not available")):console.error(`❌ Scroll failed for targetId: "${s}"`)})),console.log("✅ Navigation click handlers setup complete")}updateProgress(){if(!this.progressBar)return;const e=window.pageYOffset,t=document.documentElement.scrollHeight-window.innerHeight,o=t>0?e/t*100:0;this.progressBar.style.width=`${Math.min(Math.max(o,0),100)}%`}setupScrollListeners(){let e=!1;window.addEventListener("scroll",(()=>{e||(requestAnimationFrame((()=>{this.updateProgress(),e=!1})),e=!0)}),{passive:!0})}setupPriorityFilters(){this.filterButtons.forEach((e=>{e.addEventListener("click",(()=>{const t=e.getAttribute("data-priority");this.filterButtons.forEach((e=>e.classList.remove("opacity-50"))),e.classList.toggle("opacity-50"),this.navLinks.forEach((o=>{const s=o.getAttribute("data-priority"),n=!e.classList.contains("opacity-50")||s===t;o.style.display=n?"flex":"none"}))}))}))}handleInitialHash(){window.location.hash&&setTimeout((()=>{const e=window.location.hash.substring(1);this.scrollToElement(e)}),100)}}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",(()=>{(new e).handleInitialHash()})):(new e).handleInitialHash();