---
import Icon from './Icon.astro';

const clients = [
  { 
    name: "QuantumLeap Capital", 
    icon: "lucide:trending-up",
    type: "Private Equity",
    delay: "0s" 
  },
  { 
    name: "Summit Health Alliance", 
    icon: "lucide:heart-pulse",
    type: "Healthcare",
    delay: "0.1s" 
  },
  { 
    name: "Apex Logistics", 
    icon: "lucide:truck",
    type: "Supply Chain",
    delay: "0.2s" 
  },
  { 
    name: "InnovateTech Solutions", 
    icon: "lucide:cpu",
    type: "Technology",
    delay: "0.3s" 
  }
];

// Helper function to format names - stack last word on mobile for 2+ word names
const formatName = (name: string, isMobile: boolean = false) => {
  const words = name.split(' ');
  
  // On mobile, stack any name with 2+ words
  if (isMobile && words.length >= 2) {
    if (words.length === 2) {
      return {
        line1: words[0],
        line2: words[1]
      };
    } else if (words.length === 3) {
      return {
        line1: words.slice(0, 2).join(' '),
        line2: words[2]
      };
    }
  }
  
  // Desktop: only stack 3-word names
  if (!isMobile && words.length === 3) {
    return {
      line1: words.slice(0, 2).join(' '),
      line2: words[2]
    };
  }
  
  return {
    line1: name,
    line2: null
  };
};
---

<section class="py-16 bg-brand-pearl dark:bg-dark-surface border-y border-gray-100 dark:border-dark-border overflow-hidden">
  <div class="container-narrow">
    <h3 class="text-center text-lg font-semibold text-gray-600 dark:text-dark-text-secondary mb-10 opacity-0 credibility-title uppercase tracking-wide">
      Trusted by industry leaders across sectors
    </h3>
    <div class="grid grid-cols-2 md:grid-cols-4 gap-8 md:gap-12 max-w-5xl mx-auto">
      {clients.map((client) => {
        const formattedName = formatName(client.name, true); // Use mobile formatting for all screen sizes
        return (
          <div 
            class="group flex flex-col items-center gap-4 opacity-0 credibility-logo"
            style={`animation-delay: ${client.delay}`}
          >
            {/* Name above the box - same formatting for all screen sizes */}
            <div class="text-center min-h-[3rem] flex items-center justify-center px-2">
              {formattedName.line2 ? (
                <div>
                  <p class="text-base font-bold text-gray-800 dark:text-dark-text group-hover:text-brand-navy dark:group-hover:text-accent-gold transition-colors leading-5">
                    {formattedName.line1}
                  </p>
                  <p class="text-base font-bold text-gray-800 dark:text-dark-text group-hover:text-brand-navy dark:group-hover:text-accent-gold transition-colors leading-5">
                    {formattedName.line2}
                  </p>
                </div>
              ) : (
                <p class="text-base font-bold text-gray-800 dark:text-dark-text group-hover:text-brand-navy dark:group-hover:text-accent-gold transition-colors">
                  {formattedName.line1}
                </p>
              )}
            </div>
            
            {/* Icon box with sector text inside */}
            <div class="flex flex-col items-center justify-center w-28 h-28 rounded-2xl bg-white dark:bg-dark-surface-3 border-2 border-gray-200 dark:border-dark-border group-hover:bg-brand-navy/5 dark:group-hover:bg-accent-gold/10 group-hover:border-brand-navy/30 dark:group-hover:border-accent-gold/30 transition-all duration-300 shadow-sm group-hover:shadow-lg p-4">
              <Icon 
                name={client.icon} 
                class="w-12 h-12 text-gray-600 dark:text-dark-text-secondary group-hover:text-brand-navy dark:group-hover:text-accent-gold transition-colors mb-2" 
              />
              <p class="text-xs font-medium text-gray-600 dark:text-dark-text-tertiary text-center leading-4">
                {client.type}
              </p>
            </div>
          </div>
        );
      })}
    </div>
  </div>
</section>

<style>
  @keyframes fadeInScale {
    from {
      opacity: 0;
      transform: scale(0.8) translateY(10px);
    }
    to {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }
  
  .credibility-title {
    animation: fadeInScale 0.6s ease-out forwards;
  }
  
  .credibility-logo {
    animation: fadeInScale 0.6s ease-out forwards;
  }
</style>

<script>
  // Trigger animations when in viewport
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.style.animationPlayState = 'running';
      }
    });
  }, { threshold: 0.1 });
  
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.credibility-title, .credibility-logo').forEach(el => {
      el.style.animationPlayState = 'paused';
      observer.observe(el);
    });
  });
</script>