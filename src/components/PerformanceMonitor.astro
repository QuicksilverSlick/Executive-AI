---
// Web Vitals monitoring for performance tracking
---

<script>
  // Only load in production and in browser environment
  if (import.meta.env.PROD && typeof window !== 'undefined') {
    // Wrap in try-catch to handle any import failures gracefully
    try {
      // Lazy load web-vitals library with error handling
      import('web-vitals').then(
        (webVitals) => {
          // Destructure with fallback checks
          const { onCLS, onFID, onFCP, onLCP, onTTFB, onINP } = webVitals || {};
          
          // Verify functions exist before using them
          if (!onCLS || !onFID || !onFCP || !onLCP || !onTTFB || !onINP) {
            console.warn('Web Vitals functions not available');
            return;
          }
          
          function sendToAnalytics(metric) {
            // Send to Google Analytics
            if (window.gtag) {
              window.gtag('event', metric.name, {
                value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),
                metric_id: metric.id,
                metric_value: metric.value,
                metric_delta: metric.delta,
                event_category: 'Web Vitals',
                event_label: metric.id,
                non_interaction: true,
              });
            }

            // Log to console in dev
            if (import.meta.env.DEV) {
              console.log(metric);
            }
          }

          // Core Web Vitals - wrapped in try-catch for safety
          try {
            onCLS(sendToAnalytics);
            onFID(sendToAnalytics);
            onFCP(sendToAnalytics);
            onLCP(sendToAnalytics);
            onTTFB(sendToAnalytics);
            onINP(sendToAnalytics);
          } catch (e) {
            console.warn('Error setting up Web Vitals monitoring:', e);
          }
        },
        (error) => {
          // Handle import failure gracefully
          console.warn('Web Vitals library could not be loaded:', error);
        }
      );
    } catch (error) {
      console.warn('Performance monitoring setup failed:', error);
    }
  }

  // Custom performance marks
  if ('performance' in window) {
    // Mark when interactive
    window.addEventListener('load', () => {
      performance.mark('page-interactive');
      
      // Measure time to interactive
      performance.measure('time-to-interactive', 'navigationStart', 'page-interactive');
      
      const measure = performance.getEntriesByName('time-to-interactive')[0];
      if (measure && window.gtag) {
        window.gtag('event', 'timing_complete', {
          name: 'time_to_interactive',
          value: Math.round(measure.duration),
          event_category: 'Performance',
        });
      }
    });

    // Resource timing
    window.addEventListener('load', () => {
      const resources = performance.getEntriesByType('resource');
      const totalSize = resources.reduce((sum, resource) => sum + (resource.transferSize || 0), 0);
      const totalDuration = resources.reduce((sum, resource) => sum + resource.duration, 0);

      if (window.gtag) {
        window.gtag('event', 'resource_timing', {
          total_resources: resources.length,
          total_size_kb: Math.round(totalSize / 1024),
          total_duration_ms: Math.round(totalDuration),
          event_category: 'Performance',
        });
      }
    });
  }
</script>