---
/*
 * DREAMFORGE HIVE-MIND CHAIN OF CUSTODY
 *
 * @file-purpose: Interactive test page for voice search acknowledgment system
 * @version: 1.0.0
 * @init-author: test-agent
 * @init-cc-sessionId: cc-unknown-20250808-681
 * @init-timestamp: 2025-08-08T00:00:00Z
 * @reasoning:
 * - **Objective:** Provide interactive testing environment for voice search acknowledgments
 * - **Strategy:** Create comprehensive test page with debug panel and audio verification
 * - **Outcome:** Enable manual testing and validation of voice search experience
 */

const title = "Voice Search Acknowledgment Test";
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            background: linear-gradient(135deg, #1e3c72, #2a5298);
            color: white;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: 1fr 400px;
            gap: 20px;
            height: calc(100vh - 40px);
        }
        
        .main-panel {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 30px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .debug-panel {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            overflow-y: auto;
        }
        
        h1 {
            margin-bottom: 30px;
            text-align: center;
            font-size: 2.5rem;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .controls {
            display: flex;
            flex-direction: column;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .control-group {
            background: rgba(255, 255, 255, 0.05);
            padding: 20px;
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .control-group h3 {
            margin-bottom: 15px;
            color: #4ecdc4;
            font-size: 1.2rem;
        }
        
        button {
            background: linear-gradient(45deg, #ff6b6b, #ee5a52);
            border: none;
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            transition: all 0.3s ease;
            margin: 5px;
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 107, 107, 0.4);
        }
        
        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }
        
        button.success {
            background: linear-gradient(45deg, #4ecdc4, #44a08d);
        }
        
        button.warning {
            background: linear-gradient(45deg, #f7b731, #fc4a1a);
        }
        
        .status-indicator {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #ff6b6b;
            animation: pulse 2s infinite;
        }
        
        .status-dot.connected {
            background: #4ecdc4;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        
        .test-scenarios {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
        }
        
        .scenario-button {
            background: linear-gradient(45deg, #667eea, #764ba2);
            padding: 15px;
            border-radius: 10px;
            text-align: left;
            font-size: 0.9rem;
        }
        
        .scenario-button:hover {
            background: linear-gradient(45deg, #764ba2, #667eea);
        }
        
        .debug-section {
            margin-bottom: 20px;
        }
        
        .debug-section h4 {
            color: #4ecdc4;
            margin-bottom: 10px;
            font-size: 1rem;
            border-bottom: 1px solid rgba(78, 205, 196, 0.3);
            padding-bottom: 5px;
        }
        
        .event-log {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 5px;
            padding: 10px;
            font-family: 'Courier New', monospace;
            font-size: 0.8rem;
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .event-item {
            margin-bottom: 5px;
            padding: 5px;
            border-radius: 3px;
            border-left: 3px solid;
        }
        
        .event-acknowledgment {
            border-left-color: #4ecdc4;
            background: rgba(78, 205, 196, 0.1);
        }
        
        .event-search {
            border-left-color: #667eea;
            background: rgba(102, 126, 234, 0.1);
        }
        
        .event-complete {
            border-left-color: #4ecdc4;
            background: rgba(78, 205, 196, 0.1);
        }
        
        .event-error {
            border-left-color: #ff6b6b;
            background: rgba(255, 107, 107, 0.1);
        }
        
        .metrics {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }
        
        .metric-item {
            background: rgba(255, 255, 255, 0.05);
            padding: 10px;
            border-radius: 5px;
            text-align: center;
        }
        
        .metric-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #4ecdc4;
        }
        
        .metric-label {
            font-size: 0.8rem;
            opacity: 0.8;
        }
        
        .audio-controls {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
            flex-wrap: wrap;
        }
        
        .validation-checklist {
            list-style: none;
        }
        
        .validation-checklist li {
            padding: 5px 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .validation-checklist .checkbox {
            width: 16px;
            height: 16px;
            border: 2px solid #4ecdc4;
            border-radius: 3px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
        }
        
        .validation-checklist .checkbox.checked {
            background: #4ecdc4;
            color: #1e3c72;
        }
        
        @media (max-width: 1024px) {
            .container {
                grid-template-columns: 1fr;
                grid-template-rows: auto 1fr;
            }
            
            .debug-panel {
                order: -1;
                max-height: 300px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="main-panel">
            <h1>Voice Search Acknowledgment Test</h1>
            
            <div class="status-indicator">
                <div class="status-dot" id="statusDot"></div>
                <span id="connectionStatus">Disconnected</span>
            </div>
            
            <div class="controls">
                <div class="control-group">
                    <h3>Connection</h3>
                    <div class="audio-controls">
                        <button id="connectBtn">Connect Voice Agent</button>
                        <button id="disconnectBtn" disabled>Disconnect</button>
                        <button id="testAudioBtn" disabled>Test Audio</button>
                    </div>
                </div>
                
                <div class="control-group">
                    <h3>Test Scenarios</h3>
                    <div class="test-scenarios">
                        <button class="scenario-button" data-query="What's the weather?">
                            <strong>Simple Search</strong><br>
                            "What's the weather?"
                        </button>
                        <button class="scenario-button" data-query="Find information about quantum computing">
                            <strong>Complex Search</strong><br>
                            "Find information about quantum computing"
                        </button>
                        <button class="scenario-button" data-query="What's the weather? Then search for restaurants nearby.">
                            <strong>Multi-Search</strong><br>
                            Sequential searches
                        </button>
                        <button class="scenario-button" data-query="Search for something that will fail" data-error="true">
                            <strong>Error Case</strong><br>
                            Network failure simulation
                        </button>
                    </div>
                </div>
                
                <div class="control-group">
                    <h3>Manual Testing</h3>
                    <div class="audio-controls">
                        <button id="startRecording" class="success" disabled>Start Recording</button>
                        <button id="stopRecording" class="warning" disabled>Stop Recording</button>
                        <button id="clearEvents">Clear Event Log</button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="debug-panel">
            <div class="debug-section">
                <h4>Event Flow</h4>
                <div class="event-log" id="eventLog">
                    <div class="event-item event-info">Ready to test voice search acknowledgment system...</div>
                </div>
            </div>
            
            <div class="debug-section">
                <h4>Performance Metrics</h4>
                <div class="metrics">
                    <div class="metric-item">
                        <div class="metric-value" id="acknowledgmentTime">0ms</div>
                        <div class="metric-label">Acknowledgment Time</div>
                    </div>
                    <div class="metric-item">
                        <div class="metric-value" id="searchTime">0ms</div>
                        <div class="metric-label">Search Time</div>
                    </div>
                    <div class="metric-item">
                        <div class="metric-value" id="totalInteractions">0</div>
                        <div class="metric-label">Total Tests</div>
                    </div>
                    <div class="metric-item">
                        <div class="metric-value" id="successRate">100%</div>
                        <div class="metric-label">Success Rate</div>
                    </div>
                </div>
            </div>
            
            <div class="debug-section">
                <h4>Validation Checklist</h4>
                <ul class="validation-checklist" id="validationChecklist">
                    <li>
                        <div class="checkbox" id="check-acknowledgment">✓</div>
                        Agent acknowledges search request
                    </li>
                    <li>
                        <div class="checkbox" id="check-voice-consistency">✓</div>
                        Same voice used throughout
                    </li>
                    <li>
                        <div class="checkbox" id="check-no-manual-tts">✓</div>
                        No manual TTS or different voices
                    </li>
                    <li>
                        <div class="checkbox" id="check-smooth-transition">✓</div>
                        Smooth transition to results
                    </li>
                    <li>
                        <div class="checkbox" id="check-error-handling">✓</div>
                        Error cases handled gracefully
                    </li>
                </ul>
            </div>
        </div>
    </div>

    <script>
        /*
         * Voice Search Acknowledgment Test Controller
         */
        class VoiceSearchTestController {
            constructor() {
                this.isConnected = false;
                this.isRecording = false;
                this.events = [];
                this.metrics = {
                    acknowledgmentTime: 0,
                    searchTime: 0,
                    totalInteractions: 0,
                    successfulInteractions: 0
                };
                this.currentVoiceId = null;
                this.webrtcConnection = null;
                
                this.initializeElements();
                this.bindEvents();
                this.updateUI();
            }
            
            initializeElements() {
                this.elements = {
                    statusDot: document.getElementById('statusDot'),
                    connectionStatus: document.getElementById('connectionStatus'),
                    connectBtn: document.getElementById('connectBtn'),
                    disconnectBtn: document.getElementById('disconnectBtn'),
                    testAudioBtn: document.getElementById('testAudioBtn'),
                    startRecording: document.getElementById('startRecording'),
                    stopRecording: document.getElementById('stopRecording'),
                    clearEvents: document.getElementById('clearEvents'),
                    eventLog: document.getElementById('eventLog'),
                    acknowledgmentTime: document.getElementById('acknowledgmentTime'),
                    searchTime: document.getElementById('searchTime'),
                    totalInteractions: document.getElementById('totalInteractions'),
                    successRate: document.getElementById('successRate'),
                    validationChecklist: document.getElementById('validationChecklist')
                };
            }
            
            bindEvents() {
                this.elements.connectBtn.addEventListener('click', () => this.connectVoiceAgent());
                this.elements.disconnectBtn.addEventListener('click', () => this.disconnectVoiceAgent());
                this.elements.testAudioBtn.addEventListener('click', () => this.testAudio());
                this.elements.startRecording.addEventListener('click', () => this.startRecording());
                this.elements.stopRecording.addEventListener('click', () => this.stopRecording());
                this.elements.clearEvents.addEventListener('click', () => this.clearEventLog());
                
                // Bind scenario buttons
                document.querySelectorAll('.scenario-button').forEach(btn => {
                    btn.addEventListener('click', () => {
                        const query = btn.getAttribute('data-query');
                        const isError = btn.getAttribute('data-error') === 'true';
                        this.runTestScenario(query, isError);
                    });
                });
            }
            
            async connectVoiceAgent() {
                try {
                    this.logEvent('Connecting to voice agent...', 'info');
                    
                    // Simulate WebRTC connection setup
                    await this.setupWebRTCConnection();
                    
                    this.isConnected = true;
                    this.currentVoiceId = 'voice-' + Date.now();
                    this.logEvent('Connected successfully. Voice ID: ' + this.currentVoiceId, 'success');
                    
                } catch (error) {
                    this.logEvent('Connection failed: ' + error.message, 'error');
                }
                
                this.updateUI();
            }
            
            async setupWebRTCConnection() {
                // Enhanced system prompt for voice search acknowledgment testing
                const systemPrompt = `You are a helpful voice assistant designed for search acknowledgment testing. Follow these critical rules:

1. IMMEDIATELY acknowledge any search request verbally before executing search functions
2. Use phrases like "Let me search for that" or "I'll look that up for you" 
3. Maintain the same voice and speaking style throughout the interaction
4. Execute search functions only AFTER providing verbal acknowledgment
5. Present results in a conversational, natural manner
6. For error scenarios, maintain voice consistency while explaining the issue

Available functions:
- search_web: Search the web (ALWAYS acknowledge verbally first)
- get_weather: Get weather information (ALWAYS say "I'll check the weather for you" first)

Remember: Your acknowledgment should sound natural and use the same voice as your regular responses.`;

                // Mock WebRTC connection for testing
                this.webrtcConnection = {
                    systemPrompt,
                    state: 'connected',
                    voice: 'alloy',
                    model: 'claude-3-5-sonnet-20241022'
                };
                
                // Simulate connection delay
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
            disconnectVoiceAgent() {
                if (this.webrtcConnection) {
                    this.webrtcConnection = null;
                }
                
                this.isConnected = false;
                this.currentVoiceId = null;
                this.logEvent('Disconnected from voice agent', 'info');
                this.updateUI();
            }
            
            async testAudio() {
                if (!this.isConnected) return;
                
                this.logEvent('Testing audio connection...', 'info');
                
                // Simulate audio test
                await new Promise(resolve => setTimeout(resolve, 500));
                
                this.logEvent('Audio test successful - Voice ID: ' + this.currentVoiceId, 'success');
            }
            
            async runTestScenario(query, isError = false) {
                if (!this.isConnected) {
                    this.logEvent('Please connect voice agent first', 'error');
                    return;
                }
                
                this.logEvent(`Testing scenario: "${query}"`, 'info');
                
                const startTime = Date.now();
                let acknowledgmentTime = 0;
                let searchTime = 0;
                
                try {
                    // Step 1: Simulate voice input processing
                    this.logEvent(`User input: "${query}"`, 'user');
                    
                    if (isError) {
                        throw new Error('Simulated network timeout');
                    }
                    
                    // Step 2: Agent acknowledges (should happen before search)
                    await new Promise(resolve => setTimeout(resolve, 200));
                    acknowledgmentTime = Date.now() - startTime;
                    
                    this.logEvent(`Agent acknowledges: "Let me search for that information"`, 'acknowledgment');
                    this.addEvent('acknowledgment', {
                        query,
                        acknowledged: true,
                        voiceId: this.currentVoiceId,
                        timestamp: Date.now()
                    });
                    
                    // Step 3: Execute search function
                    await new Promise(resolve => setTimeout(resolve, 300));
                    searchTime = Date.now() - startTime;
                    
                    this.logEvent(`Executing search for: "${query}"`, 'search');
                    this.addEvent('search_start', {
                        query,
                        voiceId: this.currentVoiceId,
                        timestamp: Date.now()
                    });
                    
                    // Step 4: Return results
                    await new Promise(resolve => setTimeout(resolve, 400));
                    
                    this.logEvent(`Search completed successfully`, 'complete');
                    this.addEvent('search_complete', {
                        query,
                        results: ['Mock search result'],
                        voiceId: this.currentVoiceId,
                        timestamp: Date.now()
                    });
                    
                    this.metrics.totalInteractions++;
                    this.metrics.successfulInteractions++;
                    this.metrics.acknowledgmentTime = acknowledgmentTime;
                    this.metrics.searchTime = searchTime;
                    
                } catch (error) {
                    this.logEvent(`Error during search: ${error.message}`, 'error');
                    this.addEvent('error', {
                        query,
                        error: error.message,
                        voiceId: this.currentVoiceId,
                        timestamp: Date.now()
                    });
                    
                    this.metrics.totalInteractions++;
                }
                
                this.updateMetrics();
                this.validateSearchFlow();
            }
            
            startRecording() {
                if (!this.isConnected) return;
                
                this.isRecording = true;
                this.logEvent('Started voice recording...', 'info');
                this.updateUI();
                
                // Simulate recording timeout
                setTimeout(() => {
                    if (this.isRecording) {
                        this.stopRecording();
                        this.logEvent('Recording stopped automatically (timeout)', 'warning');
                    }
                }, 10000);
            }
            
            stopRecording() {
                if (!this.isRecording) return;
                
                this.isRecording = false;
                this.logEvent('Stopped voice recording', 'info');
                
                // Simulate processing recorded audio
                setTimeout(() => {
                    const mockQuery = "What's the weather in San Francisco?";
                    this.runTestScenario(mockQuery);
                }, 500);
                
                this.updateUI();
            }
            
            addEvent(type, data) {
                this.events.push({
                    type,
                    data,
                    timestamp: Date.now()
                });
            }
            
            logEvent(message, type = 'info') {
                const timestamp = new Date().toLocaleTimeString();
                const eventElement = document.createElement('div');
                eventElement.className = `event-item event-${type}`;
                eventElement.textContent = `[${timestamp}] ${message}`;
                
                this.elements.eventLog.appendChild(eventElement);
                this.elements.eventLog.scrollTop = this.elements.eventLog.scrollHeight;
            }
            
            clearEventLog() {
                this.elements.eventLog.innerHTML = '<div class="event-item event-info">Event log cleared...</div>';
                this.events = [];
                this.metrics = {
                    acknowledgmentTime: 0,
                    searchTime: 0,
                    totalInteractions: 0,
                    successfulInteractions: 0
                };
                this.updateMetrics();
            }
            
            updateMetrics() {
                this.elements.acknowledgmentTime.textContent = this.metrics.acknowledgmentTime + 'ms';
                this.elements.searchTime.textContent = this.metrics.searchTime + 'ms';
                this.elements.totalInteractions.textContent = this.metrics.totalInteractions;
                
                const successRate = this.metrics.totalInteractions > 0 
                    ? Math.round((this.metrics.successfulInteractions / this.metrics.totalInteractions) * 100)
                    : 100;
                this.elements.successRate.textContent = successRate + '%';
            }
            
            validateSearchFlow() {
                const recentEvents = this.events.slice(-5); // Check last 5 events
                const validationResults = {
                    acknowledgment: false,
                    voiceConsistency: false,
                    noManualTts: true,
                    smoothTransition: false,
                    errorHandling: true
                };
                
                // Check for acknowledgment before search
                const acknowledgmentEvent = recentEvents.find(e => e.type === 'acknowledgment');
                const searchEvent = recentEvents.find(e => e.type === 'search_start');
                
                if (acknowledgmentEvent && searchEvent) {
                    validationResults.acknowledgment = acknowledgmentEvent.timestamp < searchEvent.timestamp;
                    validationResults.voiceConsistency = acknowledgmentEvent.data.voiceId === searchEvent.data.voiceId;
                    validationResults.smoothTransition = (searchEvent.timestamp - acknowledgmentEvent.timestamp) < 1000;
                }
                
                // Update validation checklist
                Object.keys(validationResults).forEach(key => {
                    const checkboxId = 'check-' + key.replace(/([A-Z])/g, '-$1').toLowerCase();
                    const checkbox = document.getElementById(checkboxId);
                    if (checkbox) {
                        if (validationResults[key]) {
                            checkbox.classList.add('checked');
                            checkbox.textContent = '✓';
                        } else {
                            checkbox.classList.remove('checked');
                            checkbox.textContent = '✗';
                        }
                    }
                });
            }
            
            updateUI() {
                // Update connection status
                if (this.isConnected) {
                    this.elements.statusDot.classList.add('connected');
                    this.elements.connectionStatus.textContent = 'Connected';
                    this.elements.connectBtn.disabled = true;
                    this.elements.disconnectBtn.disabled = false;
                    this.elements.testAudioBtn.disabled = false;
                    this.elements.startRecording.disabled = false;
                } else {
                    this.elements.statusDot.classList.remove('connected');
                    this.elements.connectionStatus.textContent = 'Disconnected';
                    this.elements.connectBtn.disabled = false;
                    this.elements.disconnectBtn.disabled = true;
                    this.elements.testAudioBtn.disabled = true;
                    this.elements.startRecording.disabled = true;
                }
                
                // Update recording status
                if (this.isRecording) {
                    this.elements.startRecording.disabled = true;
                    this.elements.stopRecording.disabled = false;
                } else {
                    this.elements.startRecording.disabled = !this.isConnected;
                    this.elements.stopRecording.disabled = true;
                }
                
                // Update scenario buttons
                document.querySelectorAll('.scenario-button').forEach(btn => {
                    btn.disabled = !this.isConnected;
                });
            }
        }
        
        // Initialize the test controller when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            window.testController = new VoiceSearchTestController();
        });
    </script>
</body>
</html>