---
export const prerender = false;
---

<!DOCTYPE html>
<html>
<head>
    <title>Voice Agent Diagnostic</title>
    <style>
        body { font-family: monospace; padding: 20px; }
        .test { margin: 10px 0; padding: 10px; border: 1px solid #ccc; }
        .success { background: #d4f4dd; }
        .error { background: #ffcccc; }
        .pending { background: #fff3cd; }
        button { margin: 5px; padding: 10px; cursor: pointer; }
        pre { white-space: pre-wrap; word-wrap: break-word; }
    </style>
</head>
<body>
    <h1>Voice Agent Connection Diagnostic</h1>
    
    <div id="tests">
        <div class="test" id="test-env">
            <h3>1. Environment Check</h3>
            <button onclick="testEnvironment()">Test Environment</button>
            <pre id="env-result"></pre>
        </div>
        
        <div class="test" id="test-health">
            <h3>2. Health Check</h3>
            <button onclick="testHealth()">Test Health API</button>
            <pre id="health-result"></pre>
        </div>
        
        <div class="test" id="test-token">
            <h3>3. Token Generation</h3>
            <button onclick="testToken()">Test Token API</button>
            <pre id="token-result"></pre>
        </div>
        
        <div class="test" id="test-search">
            <h3>4. Search API</h3>
            <button onclick="testSearch()">Test Search API</button>
            <pre id="search-result"></pre>
        </div>
        
        <div class="test" id="test-voice">
            <h3>5. Voice Agent Connection</h3>
            <button onclick="testVoiceAgent()">Test Voice Agent</button>
            <pre id="voice-result"></pre>
        </div>
    </div>

    <script type="module">
        // Make functions global
        window.testEnvironment = async function() {
            const resultEl = document.getElementById('env-result');
            const testEl = document.getElementById('test-env');
            testEl.className = 'test pending';
            resultEl.textContent = 'Testing...';
            
            try {
                const response = await fetch('/api/voice-agent/debug-env');
                const data = await response.json();
                
                testEl.className = 'test success';
                resultEl.textContent = JSON.stringify(data, null, 2);
            } catch (error) {
                testEl.className = 'test error';
                resultEl.textContent = `Error: ${error.message}`;
            }
        };
        
        window.testHealth = async function() {
            const resultEl = document.getElementById('health-result');
            const testEl = document.getElementById('test-health');
            testEl.className = 'test pending';
            resultEl.textContent = 'Testing...';
            
            try {
                const response = await fetch('/api/voice-agent/health');
                const data = await response.json();
                
                testEl.className = data.status === 'healthy' ? 'test success' : 'test error';
                resultEl.textContent = JSON.stringify(data, null, 2);
            } catch (error) {
                testEl.className = 'test error';
                resultEl.textContent = `Error: ${error.message}`;
            }
        };
        
        window.testToken = async function() {
            const resultEl = document.getElementById('token-result');
            const testEl = document.getElementById('test-token');
            testEl.className = 'test pending';
            resultEl.textContent = 'Testing...';
            
            try {
                console.log('Making token request...');
                const response = await fetch('/api/voice-agent/token', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ session_id: 'test-' + Date.now() })
                });
                
                console.log('Token response status:', response.status);
                const data = await response.json();
                console.log('Token data:', data);
                
                testEl.className = data.success ? 'test success' : 'test error';
                resultEl.textContent = JSON.stringify(data, null, 2);
            } catch (error) {
                console.error('Token error:', error);
                testEl.className = 'test error';
                resultEl.textContent = `Error: ${error.message}\n${error.stack}`;
            }
        };
        
        window.testSearch = async function() {
            const resultEl = document.getElementById('search-result');
            const testEl = document.getElementById('test-search');
            testEl.className = 'test pending';
            resultEl.textContent = 'Testing...';
            
            try {
                const response = await fetch('/api/voice-agent/responses-search', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query: 'test search' })
                });
                
                const data = await response.json();
                
                testEl.className = data.success ? 'test success' : 'test error';
                resultEl.textContent = JSON.stringify(data, null, 2);
            } catch (error) {
                testEl.className = 'test error';
                resultEl.textContent = `Error: ${error.message}`;
            }
        };
        
        window.testVoiceAgent = async function() {
            const resultEl = document.getElementById('voice-result');
            const testEl = document.getElementById('test-voice');
            testEl.className = 'test pending';
            resultEl.textContent = 'Testing voice agent initialization...';
            
            try {
                // Import voice agent
                const { createWebRTCVoiceAgent } = await import('/src/lib/voice-agent/webrtc/main.ts');
                
                resultEl.textContent += '\n✓ Voice agent module loaded';
                
                // Create agent with explicit configuration
                const agent = createWebRTCVoiceAgent({
                    apiEndpoint: window.location.origin + '/api/voice-agent',
                    maxReconnectAttempts: 1,
                    reconnectDelay: 1000
                });
                
                resultEl.textContent += '\n✓ Voice agent created';
                
                // Set up event listeners
                const events = [];
                agent.on('connectionStateChanged', (state) => {
                    events.push(`Connection: ${state}`);
                    resultEl.textContent += `\n→ Connection state: ${state}`;
                });
                
                agent.on('error', (error) => {
                    events.push(`Error: ${error.message}`);
                    resultEl.textContent += `\n✗ Error: ${error.message}`;
                });
                
                // Try to initialize
                resultEl.textContent += '\n→ Initializing...';
                await agent.initialize();
                
                resultEl.textContent += '\n✓ Voice agent initialized successfully!';
                testEl.className = 'test success';
                
                // Disconnect after 2 seconds
                setTimeout(() => {
                    agent.disconnect();
                    resultEl.textContent += '\n→ Voice agent disconnected';
                }, 2000);
                
            } catch (error) {
                console.error('Voice agent error:', error);
                testEl.className = 'test error';
                resultEl.textContent += `\n✗ Failed: ${error.message}\n${error.stack}`;
            }
        };
        
        // Auto-run environment test on load
        window.addEventListener('load', () => {
            window.testEnvironment();
        });
    </script>
</body>
</html>