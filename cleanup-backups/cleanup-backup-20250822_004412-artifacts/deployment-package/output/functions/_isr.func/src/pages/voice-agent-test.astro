---
/*
 * DREAMFORGE HIVE-MIND CHAIN OF CUSTODY
 *
 * @file-purpose: Voice agent test page for integration verification
 * @version: 1.0.0
 * @init-author: engineer-agent
 * @init-cc-sessionId: cc-eng-20250801-003
 * @init-timestamp: 2025-08-01T16:00:00Z
 * @reasoning:
 * - **Objective:** Comprehensive test page for voice agent functionality
 * - **Strategy:** Create isolated test environment with debug features
 * - **Outcome:** Fully functional voice agent testing interface
 */

import Layout from '../layouts/Layout.astro';
import VoiceAssistantWidget from '../components/voice-agent/VoiceAssistantWidget.astro';
---

<Layout 
  title="Voice Agent Test - Executive AI Training"
  description="Test page for voice assistant functionality and integration verification"
  noindex={true}
  disableVoiceWidget={true}
>
  <div class="min-h-screen bg-brand-pearl dark:bg-dark-surface py-12">
    <div class="container mx-auto px-6 max-w-4xl">
      <!-- Header -->
      <div class="text-center mb-12">
        <h1 class="text-4xl font-bold text-brand-charcoal dark:text-dark-text mb-4">
          Voice Agent Integration Test
        </h1>
        <p class="text-lg text-gray-600 dark:text-dark-text-secondary mb-8">
          This page tests all voice assistant components and integrations
        </p>
        <div class="inline-flex items-center gap-2 bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-400 px-4 py-2 rounded-lg">
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
          </svg>
          Voice Agent Ready
        </div>
      </div>

      <!-- Test Sections -->
      <div class="space-y-8">
        <!-- Component Status -->
        <section class="bg-white dark:bg-dark-surface-2 rounded-xl p-6 shadow-lg">
          <h2 class="text-2xl font-semibold text-brand-charcoal dark:text-dark-text mb-6">
            Component Status
          </h2>
          <div class="grid md:grid-cols-2 gap-6">
            <!-- WebRTC Status -->
            <div class="space-y-4">
              <h3 class="text-lg font-medium text-brand-charcoal dark:text-dark-text">
                WebRTC Connection
              </h3>
              <div id="webrtc-status" class="flex items-center gap-2 text-gray-600 dark:text-dark-text-secondary">
                <div class="w-3 h-3 rounded-full bg-gray-400"></div>
                <span>Not connected</span>
              </div>
            </div>
            
            <!-- Audio Status -->
            <div class="space-y-4">
              <h3 class="text-lg font-medium text-brand-charcoal dark:text-dark-text">
                Audio System
              </h3>
              <div id="audio-status" class="flex items-center gap-2 text-gray-600 dark:text-dark-text-secondary">
                <div class="w-3 h-3 rounded-full bg-gray-400"></div>
                <span>Not initialized</span>
              </div>
            </div>
            
            <!-- Token Status -->
            <div class="space-y-4">
              <h3 class="text-lg font-medium text-brand-charcoal dark:text-dark-text">
                Authentication
              </h3>
              <div id="token-status" class="flex items-center gap-2 text-gray-600 dark:text-dark-text-secondary">
                <div class="w-3 h-3 rounded-full bg-gray-400"></div>
                <span>No token</span>
              </div>
            </div>
            
            <!-- Knowledge Base -->
            <div class="space-y-4">
              <h3 class="text-lg font-medium text-brand-charcoal dark:text-dark-text">
                Knowledge Base
              </h3>
              <div id="knowledge-status" class="flex items-center gap-2 text-green-600 dark:text-green-400">
                <div class="w-3 h-3 rounded-full bg-green-500"></div>
                <span>Loaded</span>
              </div>
            </div>
          </div>
        </section>

        <!-- Test Controls -->
        <section class="bg-white dark:bg-dark-surface-2 rounded-xl p-6 shadow-lg">
          <h2 class="text-2xl font-semibold text-brand-charcoal dark:text-dark-text mb-6">
            Test Controls
          </h2>
          <div class="grid md:grid-cols-2 gap-6">
            <!-- Connection Tests -->
            <div class="space-y-4">
              <h3 class="text-lg font-medium text-brand-charcoal dark:text-dark-text">
                Connection Tests
              </h3>
              <div class="space-y-3">
                <button 
                  id="test-token" 
                  class="w-full bg-accent-sky hover:bg-accent-sky-dark text-white px-4 py-2 rounded-lg transition-colors"
                >
                  Test Token Endpoint
                </button>
                <button 
                  id="test-health" 
                  class="w-full bg-accent-green hover:bg-accent-green-dark text-white px-4 py-2 rounded-lg transition-colors"
                >
                  Test Health Check
                </button>
                <button 
                  id="test-microphone" 
                  class="w-full bg-accent-gold hover:bg-accent-gold-dark text-white px-4 py-2 rounded-lg transition-colors"
                >
                  Test Microphone Access
                </button>
              </div>
            </div>
            
            <!-- UI Tests -->
            <div class="space-y-4">
              <h3 class="text-lg font-medium text-brand-charcoal dark:text-dark-text">
                UI Tests
              </h3>
              <div class="space-y-3">
                <button 
                  id="test-widget-expand" 
                  class="w-full bg-brand-gold hover:bg-brand-gold-warm text-white px-4 py-2 rounded-lg transition-colors"
                >
                  Expand Widget
                </button>
                <button 
                  id="test-widget-minimize" 
                  class="w-full bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg transition-colors"
                >
                  Minimize Widget
                </button>
                <button 
                  id="test-notifications" 
                  class="w-full bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors"
                >
                  Test Notifications
                </button>
              </div>
            </div>
          </div>
        </section>

        <!-- Debug Console -->
        <section class="bg-white dark:bg-dark-surface-2 rounded-xl p-6 shadow-lg">
          <h2 class="text-2xl font-semibold text-brand-charcoal dark:text-dark-text mb-6">
            Debug Console
          </h2>
          <div class="bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm max-h-64 overflow-y-auto">
            <div id="debug-output">
              <div class="text-gray-500">[Debug] Voice agent test page loaded</div>
            </div>
          </div>
          <div class="mt-4 flex gap-2">
            <button 
              id="clear-debug" 
              class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors"
            >
              Clear Console
            </button>
            <button 
              id="test-all" 
              class="bg-brand-gold hover:bg-brand-gold-warm text-white px-4 py-2 rounded-lg transition-colors"
            >
              Run All Tests
            </button>
          </div>
        </section>

        <!-- Browser Compatibility -->
        <section class="bg-white dark:bg-dark-surface-2 rounded-xl p-6 shadow-lg">
          <h2 class="text-2xl font-semibold text-brand-charcoal dark:text-dark-text mb-6">
            Browser Compatibility
          </h2>
          <div class="grid md:grid-cols-3 gap-4" id="browser-compat">
            <!-- Will be populated by JavaScript -->
          </div>
        </section>

        <!-- Usage Instructions -->
        <section class="bg-white dark:bg-dark-surface-2 rounded-xl p-6 shadow-lg">
          <h2 class="text-2xl font-semibold text-brand-charcoal dark:text-dark-text mb-6">
            Usage Instructions
          </h2>
          <div class="prose dark:prose-invert max-w-none">
            <ol class="space-y-3">
              <li>
                <strong>Voice Widget:</strong> Look for the floating microphone button in the bottom-right corner
              </li>
              <li>
                <strong>Expand Panel:</strong> Click the floating button to open the voice assistant panel
              </li>
              <li>
                <strong>Start Conversation:</strong> Click the main microphone button or press Space bar to start talking
              </li>
              <li>
                <strong>Permissions:</strong> Grant microphone access when prompted by your browser
              </li>
              <li>
                <strong>Test Features:</strong> Use the test buttons above to verify individual components
              </li>
              <li>
                <strong>Debug:</strong> Monitor the debug console for detailed logging information
              </li>
            </ol>
          </div>
        </section>
      </div>
    </div>
  </div>

  <!-- Test Scripts -->
  <script>
    // Debug logging
    function debugLog(message, type = 'info') {
      const output = document.getElementById('debug-output');
      const timestamp = new Date().toISOString().split('T')[1].split('.')[0];
      const typeColors = {
        info: 'text-green-400',
        warn: 'text-yellow-400',
        error: 'text-red-400',
        success: 'text-blue-400'
      };
      
      const div = document.createElement('div');
      div.className = typeColors[type] || 'text-green-400';
      div.textContent = `[${timestamp}] ${message}`;
      
      output.appendChild(div);
      output.scrollTop = output.scrollHeight;
    }

    // Update status indicator
    function updateStatus(elementId, status, isSuccess = false) {
      const element = document.getElementById(elementId);
      if (!element) return;
      
      const indicator = element.querySelector('.w-3.h-3');
      const text = element.querySelector('span');
      
      if (indicator) {
        indicator.className = `w-3 h-3 rounded-full ${isSuccess ? 'bg-green-500' : 'bg-red-500'}`;
      }
      
      if (text) {
        text.textContent = status;
      }
    }

    // Test functions
    async function testTokenEndpoint() {
      debugLog('Testing token endpoint...', 'info');
      try {
        const response = await fetch('/api/voice-agent/token', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        
        if (response.ok) {
          const data = await response.json();
          debugLog('Token endpoint test successful', 'success');
          updateStatus('token-status', 'Valid token received', true);
          return data;
        } else {
          throw new Error(`HTTP ${response.status}`);
        }
      } catch (error) {
        debugLog(`Token endpoint test failed: ${error.message}`, 'error');
        updateStatus('token-status', 'Token request failed', false);
        throw error;
      }
    }

    async function testHealthCheck() {
      debugLog('Testing health check...', 'info');
      try {
        const response = await fetch('/api/voice-agent/health');
        
        if (response.ok) {
          const data = await response.json();
          debugLog('Health check successful', 'success');
          return data;
        } else {
          throw new Error(`HTTP ${response.status}`);
        }
      } catch (error) {
        debugLog(`Health check failed: ${error.message}`, 'error');
        throw error;
      }
    }

    async function testMicrophoneAccess() {
      debugLog('Testing microphone access...', 'info');
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ 
          audio: {
            echoCancellation: true,
            noiseSuppression: true,
            autoGainControl: true
          }
        });
        
        debugLog('Microphone access granted', 'success');
        updateStatus('audio-status', 'Microphone accessible', true);
        
        // Stop the stream
        stream.getTracks().forEach(track => track.stop());
        return true;
      } catch (error) {
        debugLog(`Microphone access failed: ${error.message}`, 'error');
        updateStatus('audio-status', 'Microphone access denied', false);
        throw error;
      }
    }

    function testNotifications() {
      debugLog('Testing notification system...', 'info');
      
      // Test different notification types
      const notifications = [
        { message: 'Info notification test', type: 'info' },
        { message: 'Success notification test', type: 'success' },
        { message: 'Warning notification test', type: 'warn' },
        { message: 'Error notification test', type: 'error' }
      ];
      
      notifications.forEach((notif, index) => {
        setTimeout(() => {
          if (window.VoiceAssistantCore) {
            window.VoiceAssistantCore.showNotification(notif.message, notif.type);
          }
          debugLog(`Notification test ${index + 1}/4: ${notif.type}`, 'info');
        }, index * 1000);
      });
    }

    function expandWidget() {
      debugLog('Expanding voice widget...', 'info');
      if (window.VoiceAssistantCore) {
        window.VoiceAssistantCore.expandPanel();
        debugLog('Widget expanded successfully', 'success');
      } else {
        debugLog('Voice assistant not found', 'error');
      }
    }

    function minimizeWidget() {
      debugLog('Minimizing voice widget...', 'info');
      if (window.VoiceAssistantCore) {
        window.VoiceAssistantCore.minimizePanel();
        debugLog('Widget minimized successfully', 'success');
      } else {
        debugLog('Voice assistant not found', 'error');
      }
    }

    async function runAllTests() {
      debugLog('Starting comprehensive test suite...', 'info');
      
      const tests = [
        { name: 'Health Check', fn: testHealthCheck },
        { name: 'Token Endpoint', fn: testTokenEndpoint },
        { name: 'Microphone Access', fn: testMicrophoneAccess }
      ];
      
      let passed = 0;
      let total = tests.length;
      
      for (const test of tests) {
        try {
          await test.fn();
          passed++;
          debugLog(`✓ ${test.name} passed`, 'success');
        } catch (error) {
          debugLog(`✗ ${test.name} failed: ${error.message}`, 'error');
        }
        
        // Small delay between tests
        await new Promise(resolve => setTimeout(resolve, 500));
      }
      
      debugLog(`Test suite completed: ${passed}/${total} tests passed`, 
               passed === total ? 'success' : 'warn');
    }

    // Browser compatibility check
    function checkBrowserCompatibility() {
      const features = [
        {
          name: 'WebRTC',
          supported: !!(window.RTCPeerConnection || window.webkitRTCPeerConnection)
        },
        {
          name: 'getUserMedia',
          supported: !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia)
        },
        {
          name: 'Web Audio API',
          supported: !!(window.AudioContext || window.webkitAudioContext)
        },
        {
          name: 'WebSockets',
          supported: !!window.WebSocket
        },
        {
          name: 'ES6 Modules',
          supported: 'noModule' in HTMLScriptElement.prototype
        },
        {
          name: 'Fetch API',
          supported: !!window.fetch
        }
      ];
      
      const container = document.getElementById('browser-compat');
      
      features.forEach(feature => {
        const div = document.createElement('div');
        div.className = 'flex items-center gap-2';
        
        const statusColor = feature.supported ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400';
        const statusIcon = feature.supported ? '✓' : '✗';
        
        div.innerHTML = `
          <span class="${statusColor} font-mono">${statusIcon}</span>
          <span class="text-gray-700 dark:text-gray-300">${feature.name}</span>
        `;
        
        container.appendChild(div);
      });
    }

    // Event listeners
    document.addEventListener('DOMContentLoaded', () => {
      debugLog('Voice agent test page initialized', 'info');
      
      // Check browser compatibility
      checkBrowserCompatibility();
      
      // Setup test buttons
      document.getElementById('test-token')?.addEventListener('click', testTokenEndpoint);
      document.getElementById('test-health')?.addEventListener('click', testHealthCheck);
      document.getElementById('test-microphone')?.addEventListener('click', testMicrophoneAccess);
      document.getElementById('test-notifications')?.addEventListener('click', testNotifications);
      document.getElementById('test-widget-expand')?.addEventListener('click', expandWidget);
      document.getElementById('test-widget-minimize')?.addEventListener('click', minimizeWidget);
      document.getElementById('test-all')?.addEventListener('click', runAllTests);
      
      // Clear debug console
      document.getElementById('clear-debug')?.addEventListener('click', () => {
        document.getElementById('debug-output').innerHTML = '';
        debugLog('Debug console cleared', 'info');
      });
      
      // Wait for voice assistant to initialize
      setTimeout(() => {
        if (window.VoiceAssistantCore) {
          debugLog('Voice assistant core detected', 'success');
          updateStatus('webrtc-status', 'Core initialized', true);
        } else {
          debugLog('Voice assistant core not found', 'warn');
        }
      }, 2000);
    });
  </script>
</Layout>