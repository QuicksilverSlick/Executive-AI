---
title: "Voice Agent Compatibility Test"
description: "Test page for voice agent API compatibility and fallback modes"
---

<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{title}</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 min-h-screen">
  <div class="container mx-auto p-8">
    <div class="max-w-4xl mx-auto">
      <h1 class="text-3xl font-bold text-gray-900 mb-8">Voice Agent Compatibility Test</h1>
      
      <!-- Status Panel -->
      <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <h2 class="text-xl font-semibold text-gray-800 mb-4">System Status</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="bg-gray-50 rounded-lg p-4">
            <h3 class="font-medium text-gray-700 mb-2">API Tier</h3>
            <div id="api-tier" class="text-lg font-semibold text-blue-600">Checking...</div>
          </div>
          <div class="bg-gray-50 rounded-lg p-4">
            <h3 class="font-medium text-gray-700 mb-2">Current Mode</h3>
            <div id="current-mode" class="text-lg font-semibold text-green-600">Unknown</div>
          </div>
          <div class="bg-gray-50 rounded-lg p-4">
            <h3 class="font-medium text-gray-700 mb-2">Token Status</h3>
            <div id="token-status" class="text-lg font-semibold text-gray-600">No Token</div>
          </div>
        </div>
      </div>

      <!-- Feature Matrix -->
      <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <h2 class="text-xl font-semibold text-gray-800 mb-4">Feature Availability</h2>
        <div class="overflow-x-auto">
          <table class="w-full table-auto">
            <thead>
              <tr class="bg-gray-50">
                <th class="px-4 py-2 text-left text-sm font-medium text-gray-700">Feature</th>
                <th class="px-4 py-2 text-center text-sm font-medium text-gray-700">Available</th>
                <th class="px-4 py-2 text-left text-sm font-medium text-gray-700">Status</th>
              </tr>
            </thead>
            <tbody id="feature-table">
              <tr><td colspan="3" class="px-4 py-2 text-center text-gray-500">Loading...</td></tr>
            </tbody>
          </table>
        </div>
      </div>

      <!-- Actions -->
      <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <h2 class="text-xl font-semibold text-gray-800 mb-4">Actions</h2>
        <div class="flex flex-wrap gap-4">
          <button id="check-compatibility" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
            Check Compatibility
          </button>
          <button id="request-token" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors">
            Request Token
          </button>
          <button id="test-demo" class="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors">
            Test Demo Mode
          </button>
          <button id="test-fallback" class="bg-orange-600 text-white px-4 py-2 rounded-lg hover:bg-orange-700 transition-colors">
            Test Fallback API
          </button>
        </div>
      </div>

      <!-- Logs -->
      <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold text-gray-800 mb-4">Logs</h2>
        <div id="logs" class="bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm h-64 overflow-y-auto">
          <div>Voice Agent Compatibility Test initialized...</div>
        </div>
      </div>

      <!-- Warnings/Recommendations -->
      <div id="warnings" class="hidden bg-yellow-50 border border-yellow-200 rounded-lg p-6 mt-8">
        <h2 class="text-xl font-semibold text-yellow-800 mb-4">⚠️ Warnings & Recommendations</h2>
        <div id="warnings-content" class="space-y-2"></div>
      </div>
    </div>
  </div>

  <script>
    // Utility functions
    function log(message) {
      const logs = document.getElementById('logs');
      const timestamp = new Date().toLocaleTimeString();
      logs.innerHTML += `<div>[${timestamp}] ${message}</div>`;
      logs.scrollTop = logs.scrollHeight;
    }

    function updateStatus(tier, mode, tokenStatus) {
      document.getElementById('api-tier').textContent = tier || 'Unknown';
      document.getElementById('current-mode').textContent = mode || 'Unknown';
      document.getElementById('token-status').textContent = tokenStatus || 'No Token';
    }

    function updateFeatureTable(features) {
      const tbody = document.getElementById('feature-table');
      const featureList = [
        { key: 'realtimeVoice', name: 'Realtime Voice Chat' },
        { key: 'chatCompletion', name: 'Chat Completions' },
        { key: 'textToSpeech', name: 'Text-to-Speech' },
        { key: 'speechToText', name: 'Speech-to-Text' },
        { key: 'functionCalling', name: 'Function Calling' }
      ];

      tbody.innerHTML = featureList.map(feature => {
        const available = features[feature.key];
        const icon = available ? '✅' : '❌';
        const statusClass = available ? 'text-green-600' : 'text-red-600';
        const status = available ? 'Available' : 'Not Available';
        
        return `
          <tr class="border-t">
            <td class="px-4 py-2">${feature.name}</td>
            <td class="px-4 py-2 text-center">${icon}</td>
            <td class="px-4 py-2 ${statusClass}">${status}</td>
          </tr>
        `;
      }).join('');
    }

    function showWarnings(warnings, recommendations) {
      const warningsDiv = document.getElementById('warnings');
      const content = document.getElementById('warnings-content');
      
      if ((warnings && warnings.length > 0) || (recommendations && recommendations.length > 0)) {
        let html = '';
        
        if (warnings && warnings.length > 0) {
          html += '<div class="mb-4"><h3 class="font-semibold text-yellow-800 mb-2">Warnings:</h3><ul class="list-disc list-inside space-y-1">';
          warnings.forEach(warning => {
            html += `<li class="text-yellow-700">${warning}</li>`;
          });
          html += '</ul></div>';
        }
        
        if (recommendations && recommendations.length > 0) {
          html += '<div><h3 class="font-semibold text-yellow-800 mb-2">Recommendations:</h3><ul class="list-disc list-inside space-y-1">';
          recommendations.forEach(rec => {
            html += `<li class="text-yellow-700">${rec}</li>`;
          });
          html += '</ul></div>';
        }
        
        content.innerHTML = html;
        warningsDiv.classList.remove('hidden');
      } else {
        warningsDiv.classList.add('hidden');
      }
    }

    // API functions
    async function checkCompatibility() {
      log('Checking API compatibility...');
      try {
        const response = await fetch('/api/voice-agent/compatibility');
        const result = await response.json();
        
        log(`Compatibility check completed - Tier: ${result.tier}`);
        updateStatus(result.tier, null, null);
        updateFeatureTable(result.features || {});
        
        if (result.limitations || result.recommendations) {
          showWarnings(result.limitations, result.recommendations);
        }
        
        return result;
      } catch (error) {
        log(`❌ Compatibility check failed: ${error.message}`);
        throw error;
      }
    }

    async function requestToken() {
      log('Requesting authentication token...');
      try {
        const response = await fetch('/api/voice-agent/token', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        const result = await response.json();
        
        if (result.success) {
          log(`✅ Token acquired - Mode: ${result.mode}, Session: ${result.sessionId}`);
          updateStatus(null, result.mode, 'Valid Token');
          
          if (result.warnings) {
            result.warnings.forEach(warning => log(`⚠️ ${warning}`));
            showWarnings(result.warnings, null);
          }
        } else {
          log(`❌ Token request failed: ${result.error}`);
          updateStatus(null, null, 'Failed');
        }
        
        return result;
      } catch (error) {
        log(`❌ Token request error: ${error.message}`);
        throw error;
      }
    }

    async function testDemo() {
      log('Testing demo mode...');
      try {
        const response = await fetch('/api/voice-agent/demo', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            message: 'Hello, this is a test message',
            sessionId: 'test_session_' + Date.now()
          })
        });
        const result = await response.json();
        
        if (result.success) {
          log(`✅ Demo response: "${result.message}"`);
          log(`ℹ️ ${result.demoNotice}`);
          updateStatus(null, 'demo', null);
        } else {
          log(`❌ Demo test failed: ${result.error}`);
        }
        
        return result;
      } catch (error) {
        log(`❌ Demo test error: ${error.message}`);
        throw error;
      }
    }

    async function testFallback() {
      log('Testing fallback API...');
      try {
        const response = await fetch('/api/voice-agent/chat-fallback', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            message: 'Hello, can you help me understand AI solutions?',
            sessionId: 'fallback_test_' + Date.now(),
            includeAudio: false
          })
        });
        const result = await response.json();
        
        if (result.success) {
          log(`✅ Fallback response: "${result.message}"`);
          updateStatus(null, 'fallback', null);
          
          if (result.functionCalls) {
            log(`🔧 Function calls: ${result.functionCalls.length}`);
          }
        } else {
          log(`❌ Fallback test failed: ${result.error}`);
        }
        
        return result;
      } catch (error) {
        log(`❌ Fallback test error: ${error.message}`);
        throw error;
      }
    }

    // Event handlers
    document.getElementById('check-compatibility').addEventListener('click', checkCompatibility);
    document.getElementById('request-token').addEventListener('click', requestToken);
    document.getElementById('test-demo').addEventListener('click', testDemo);
    document.getElementById('test-fallback').addEventListener('click', testFallback);

    // Initialize
    window.addEventListener('load', async () => {
      log('Page loaded, checking initial compatibility...');
      try {
        await checkCompatibility();
      } catch (error) {
        log(`Initial compatibility check failed: ${error.message}`);
      }
    });
  </script>
</body>
</html>